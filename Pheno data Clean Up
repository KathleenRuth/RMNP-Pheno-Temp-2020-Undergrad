Packages for working with Pheno & Temp data off NEON site
install.packages("dplyr")
install.packages("ggplot2")
install.packages("lubridate")
install.packages("scales")
install.packages("tidyr")
install.packages("gridExtra")

# set working directory to ensure R can find the file we wish to import
getwd()
setwd(C:/Users/Katie's Computer/OneDrive/Documents/School/Research/NEON_obs-phenology-plant/stackedFiles-pheno)

# Read in data
ind <- read.csv('C:/Users/Katie's Computer/OneDrive/Documents/School/Research/NEON_obs-phenology-plant/stackedFiles-pheno/phe_perindividual.csv', 
        stringsAsFactors = FALSE )
        
        having issues with this
Clean up data
# remove duplicates
## expect many

library(dplyr)

distinct(ind)
ind_noD <-distinct(ind)
nrow(ind_noD)

distinct(status)
status_noD<-distinct(status)
nrow(status_noD)
       
distinct(year)       
year_noD<-distinct(year)        
nrow(year_noD)

>  # where is there an intersection of names
> sameName <- intersect(names(status_noD), names(ind_noD))
>         
> sameName       
 [1] "namedLocation"           "domainID"                "siteID"                 
 [4] "plotID"                  "date"                    "editedDate"             
 [7] "individualID"            "samplingProtocolVersion" "measuredBy"             
[10] "recordedBy"              "remarks"                 "dataQF"

> # rename status editedDate
> 
> status_noD <- rename(status_noD, editedDateStat=editedDate, 
+         measuredByStat=measuredBy, recordedByStat=recordedBy, 
+         samplingProtocolVersionStat=samplingProtocolVersion, 
+         remarksStat=remarks, dataQFStat=dataQF)     
>         
> # rename year editedDate

> year_noD <- rename(year_noD, editedDateYr=editedDate, 
+         measuredByYr=measuredBy, recordedByYr=recordedBy, 
+         samplingProtocolVersionYr=samplingProtocolVersion, 
+         remarksYr=remarks, dataQFYr=dataQF) 

> # convert column to date class
> 
> ind_noD$editedDate <- as.Date(ind_noD$editedDate)
> str(ind_noD$editedDate)        
 Date[1:121], format: "2017-09-11" "2018-04-18" "2018-04-18" "2018-04-18" "2017-09-11" ...
>         
> status_noD$date <- as.Date(status_noD$date)
> str(status_noD$date)      
 Date[1:5058], format: "2017-07-20" "2017-07-20" "2017-07-20" "2017-07-20" "2017-07-20" ...
>         
> year_noD$date <- as.Date(year_noD$date)
> str(year_noD$date)        
 Date[1:99], format: "2018-10-03" "2018-10-03" "2018-10-03" "2018-10-03" "2018-10-03" ...
 
 > # Create a new dataframe "phe_ind" with all the data from status and some from ind_lastnoD
> phe_ind <- left_join(status_noD, ind_lastnoD)        
Joining, by = c("namedLocation", "domainID", "siteID", "plotID", "date", "individualID")
Error: cannot join a Date object with an object that is not a Date object???
>         
> ## Joining, by = c("namedLocation", "domainID", "siteID", "plotID", "individualID", "taxonID", "scientificName", "growthForm") 


Data now cleaned up...

#Data Clean up Take 2 from NEON github (expect repeats)

* remove duplicates (full rows)

* convert to date format

* retain only the most recent `editedDate` in the perIndividual and status table.

###Remove Duplicates

The individual table (ind) file is included in each site by month-year file. As 

a result when all the tables are stacked there are many duplicates. 



Let's remove any duplicates that exist.



```{r remove-duplicates}

# drop UID as that will be unique for duplicate records

ind_noUID <- select(ind, -(uid))

status_noD <- select(status, -(uid))

#remove duplicates
##expect many

ind_noD <- distinct(ind_lastnoD)
nrow(ind_noD)



status_noD<-distinct(status_noD)
nrow(status_noD)

### Variable Overlap between Tables

# where is there an intersection of names

intersect(names(status_noD), names(ind_noD))

There are several fields that overlap between the datasets. Some of these are

expected to be the same and will be what we join on. 



However, some of these will have different values in each table. We want to keep 

those distinct value and not join on them. Therefore, we can rename these 

fields before joining:



* date

* editedDate

* measuredBy

* recordedBy

* samplingProtocolVersion

* remarks

* dataQF

* publicationDate


Now we want to rename the variables that would have duplicate names. We can 
rename all the variables in the status object to have "Stat" at the end of the 
variable name. 

# in Status table rename like columns 
status_noD <- rename(status_noD, dateStat=date, editedDateStat=editedDate, measuredByStat=measuredBy, recordedByStat=recordedBy, samplingProtocolVersionStat=samplingProtocolVersion, remarksStat=remarks, dataQFStat=dataQF)  



### Filter to last editedDate
The individual (ind) table contains all instances that any of the location or 
taxonomy data of an individual was updated. Therefore there are many rows for
some individuals.  We only want the latest `editedDate` on ind.

# retain only the max of the date for each individualID

ind_last <- ind_noD %>%

	group_by(individualID) %>%

	filter(editedDate==max(editedDate))
	

# oh wait, duplicate dates, retain only the most recent editedDate

ind_lastnoD <- ind_last %>%
        group_by(editedDate, individualID) %>%
        filter(row_number()==1)
        

### Join Dataframes

Now we can join the two data frames on all the variables with the same name. 
We use a `left_join()` from the dpylr package because we want to match all the 
rows from the "left" (first) dateframe to any rows that also occur in the "right"
(second) dataframe.

# Create a new dataframe "phe_ind" with all the data from status and some from ind_lastnoD
phe_ind <- left_join(status_noD, ind_lastnoD)
Warning messages:
1: Column `namedLocation` joining character vector and factor, coercing into character vector 
2: Column `domainID` joining character vector and factor, coercing into character vector 
3: Column `siteID` joining character vector and factor, coercing into character vector 
4: Column `plotID` joining character vector and factor, coercing into character vector 
5: Column `individualID` joining character vector and factor, coercing into character vector

???WHat is going on??

left off line 370 of https://github.com/mjones01/NEON-Data-Skills/blob/master/tutorials/R/NEON-pheno-temp-timeseries/01-explore-phenology-data.Rmd

looks like it worked, asked NEON tutorials in github what the warning messages were & they said the join was successful
Ack!  Two different data types.  Why?  Notice that when we checked for intersecting variable names, `data` was one of these variables. We didn't change the `data` column in the ind object from a `character` class to a date class. But, we actually don't want to combine these two `date` columns.
Try it again.  
We can rename the `date` column in ind so that the two dataframes can now join together.

```{r join-dfs}

# rename variables in ind

ind_noD <- rename(ind_noD, addDate = date)

library(ggplot2)
library(dplyr)
library(neonUtilities)

# Create a new dataframe "phe_ind" with all the data from status and some from ind_lastnoD

phe_ind <- left_join(status_noD, ind_lastnoD)
**same thing as before, but looks like data is joined> phe_ind file

> View(phe_ind)
> unique(phe_1sp$taxonID)
Error in unique(phe_1sp$taxonID) : object 'phe_1sp' not found
> unique(phe_ind$taxonID)
NULL
Warning message:
Unknown or uninitialised column: 'taxonID'. 
> View(ind_lastnoD)
> View(ind_lastnoD)
> View(ind_noD)
> View(status)
> View(year_noD)
> View(ind)
> View(ind_last)
> View(ind)
> View(ind_lastnoD)
> phe_ind <- left_join(status_noD, ind)
Joining, by = c("namedLocation", "domainID", "siteID", "plotID", "individualID")
Warning messages:
1: Column `namedLocation` joining character vector and factor, coercing into character vector 
2: Column `domainID` joining character vector and factor, coercing into character vector 
3: Column `siteID` joining character vector and factor, coercing into character vector 
4: Column `plotID` joining character vector and factor, coercing into character vector 
5: Column `individualID` joining character vector and factor, coercing into character vector 
> View(phe_ind)
> View(status)
> View(phe_ind)

